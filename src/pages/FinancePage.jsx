import { useEffect, useState } from "react";
import Sidebar from "../components/Sidebar";
import { useAuth } from "../context/AuthContext";
import { FaUserCircle } from "react-icons/fa";
import axios from "axios";
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer
} from "recharts";
import "../styles/FinancePage.css";

const months = [
  { value: 0, label: "–£—Å—ñ –º—ñ—Å—è—Ü—ñ" },
  { value: 1, label: "–°—ñ—á–µ–Ω—å" },
  { value: 2, label: "–õ—é—Ç–∏–π" },
  { value: 3, label: "–ë–µ—Ä–µ–∑–µ–Ω—å" },
  { value: 4, label: "–ö–≤—ñ—Ç–µ–Ω—å" },
  { value: 5, label: "–¢—Ä–∞–≤–µ–Ω—å" },
  { value: 6, label: "–ß–µ—Ä–≤–µ–Ω—å" },
  { value: 7, label: "–õ–∏–ø–µ–Ω—å" },
  { value: 8, label: "–°–µ—Ä–ø–µ–Ω—å" },
  { value: 9, label: "–í–µ—Ä–µ—Å–µ–Ω—å" },
  { value: 10, label: "–ñ–æ–≤—Ç–µ–Ω—å" },
  { value: 11, label: "–õ–∏—Å—Ç–æ–ø–∞–¥" },
  { value: 12, label: "–ì—Ä—É–¥–µ–Ω—å" },
];

const currentYear = new Date().getFullYear();

const FinancePage = () => {
  const { username, logout, token } = useAuth();
  const [menuOpen, setMenuOpen] = useState(false);
  const [metrics, setMetrics] = useState(null);
  const [activeSection, setActiveSection] = useState("income");
  const [selectedMonth, setSelectedMonth] = useState(0);
  const [selectedYear, setSelectedYear] = useState(currentYear);

  useEffect(() => {
    const fetchFinanceMetrics = async () => {
      try {
        const res = await axios.get("https://localhost:7252/api/finance/metrics", {
          headers: { Authorization: `Bearer ${token}` },
          params: {
            year: selectedYear,
            month: selectedMonth === 0 ? null : selectedMonth
          }
        });
        setMetrics(res.data);
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ—Ç—Ä–∏–∫:", error);
      }
    };

    if (token) fetchFinanceMetrics();
  }, [token, selectedMonth, selectedYear]);

  const handleDownload = async () => {
    try {
      const res = await axios.get("https://localhost:7252/api/finance/report", {
        responseType: "blob",
        headers: { Authorization: `Bearer ${token}` },
        params: {
          year: selectedYear,
          month: selectedMonth === 0 ? null : selectedMonth
        }
      });

      const blob = new Blob([res.data], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π_–∑–≤—ñ—Ç_${selectedYear}_${selectedMonth || "–≤—Å—ñ"}.xlsx`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É:", err);
    }
  };

  const renderSection = () => {
    if (!metrics) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫...</p>;

    const labelMap = {
      income: "–ü—Ä–∏–±—É—Ç–æ–∫",
      expenses: "–ó–∞—Ä–ø–ª–∞—Ç–∏",
      net: "–ß–∏—Å—Ç–∏–π –¥–æ—Ö—ñ–¥",
      clients: "–ö–ª—ñ—î–Ω—Ç–∏"
    };

    const keyMap = {
      income: "totalIncome",
      expenses: "totalSalaries",
      net: "netProfit",
      clients: "totalClientsByAgents"
    };

    const total = metrics[keyMap[activeSection]];
    const timeline = metrics.timeline || [];

    const chartData = timeline.map(item => ({
      name: item.label,
      value: item[keyMap[activeSection]]
    }));

    return (
      <>
        <h2>{labelMap[activeSection]}</h2>
        <p>
          {activeSection === "income" && <>üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: <strong>‚Ç¥{total.toLocaleString()}</strong></>}
          {activeSection === "expenses" && <>üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∏: <strong>‚Ç¥{total.toLocaleString()}</strong></>}
          {activeSection === "net" && <>üìä –ß–∏—Å—Ç–∏–π –¥–æ—Ö—ñ–¥: <strong>‚Ç¥{total.toLocaleString()}</strong></>}
          {activeSection === "clients" && <>üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥: <strong>{total}</strong></>}
        </p>
        <ChartBar data={chartData} />
      </>
    );
  };

  return (
    <div className="dashboard-wrapper">
      <div className="topbar">
        <h3>–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ</h3>
        {username && (
          <div
            className="profile-container"
            onMouseEnter={() => setMenuOpen(true)}
            onMouseLeave={() => setMenuOpen(false)}
          >
            <span>{username}</span>
            <FaUserCircle size={28} />
            {menuOpen && (
              <div className="profile-dropdown">
                <button>–ü—Ä–æ—Ñ—ñ–ª—å</button>
                <button onClick={logout}>–í–∏–π—Ç–∏</button>
              </div>
            )}
          </div>
        )}
      </div>

      <div className="dashboard-body">
        <Sidebar />
        <main className="main-content">
          <h1>üìà –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</h1>

          <div className="filter-controls">
            <label>–†—ñ–∫: </label>
            <input
              type="number"
              min="2020"
              max={currentYear}
              value={selectedYear}
              onChange={(e) => setSelectedYear(parseInt(e.target.value))}
            />
            <label>–ú—ñ—Å—è—Ü—å: </label>
            <select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
            >
              {months.map((m) => (
                <option key={m.value} value={m.value}>{m.label}</option>
              ))}
            </select>
            <button onClick={handleDownload} className="download-button">üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç</button>
          </div>

          <div className="finance-buttons">
            <button onClick={() => setActiveSection("income")}>–ü—Ä–∏–±—É—Ç–æ–∫</button>
            <button onClick={() => setActiveSection("expenses")}>–í–∏—Ç—Ä–∞—Ç–∏</button>
            <button onClick={() => setActiveSection("net")}>–ß–∏—Å—Ç–∏–π –¥–æ—Ö—ñ–¥</button>
            <button onClick={() => setActiveSection("clients")}>–ö–ª—ñ—î–Ω—Ç–∏</button>
          </div>

          <div className="finance-section">
            {renderSection()}
          </div>
        </main>
      </div>
    </div>
  );
};

const formatValue = (val) => {
  if (val >= 1_000_000) return `${(val / 1_000_000).toFixed(0)} –º–ª–Ω`;
  if (val >= 1_000) return `${(val / 1_000).toFixed(0)} —Ç–∏—Å`;
  return val;
};

const ChartBar = ({ data }) => (
  <ResponsiveContainer width="100%" height={300}>
    <BarChart data={data}>
      <XAxis dataKey="name" />
      <YAxis tickFormatter={formatValue} />
      <Tooltip formatter={(value) => [`‚Ç¥${formatValue(value)}`, "–°—É–º–∞"]} />
      <Bar dataKey="value" fill="#8884d8" />
    </BarChart>
  </ResponsiveContainer>
);

export default FinancePage;
